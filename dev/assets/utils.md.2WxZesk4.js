import{_ as o,C as r,c as p,o as d,aA as t,j as e,G as a,a as l,w as n}from"./chunks/framework.COI-rPE_.js";const P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"utils.md","filePath":"utils.md","lastUpdated":null}'),h={name:"utils.md"},c={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""};function x(B,s,R,V,I,N){const i=r("Badge");return d(),p("div",null,[s[76]||(s[76]=t('<ul><li><a href="#IntervalSets.Interval-Tuple{AbstractTimeSeries}"><code>IntervalSets.Interval</code></a></li><li><a href="#TimeseriesTools.UnitPower"><code>TimeseriesTools.UnitPower</code></a></li><li><a href="#Base.cat-Tuple{DimensionalData.Dimensions.Dimension, AbstractToolsArray, AbstractToolsArray, Vararg{Any}}"><code>Base.cat</code></a></li><li><a href="#Base.step-Tuple{AbstractToolsArray{T, N, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, N, B}}"><code>Base.step</code></a></li><li><a href="#TimeseriesTools.align-Tuple{AbstractDimArray, Any, Union{Tuple, AbstractVector}}"><code>TimeseriesTools.align</code></a></li><li><a href="#TimeseriesTools.buffer-Tuple{AbstractToolsArray{T, N, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, N, B}, Vararg{Any}}"><code>TimeseriesTools.buffer</code></a></li><li><a href="#TimeseriesTools.centralderiv-Tuple"><code>TimeseriesTools.centralderiv</code></a></li><li><a href="#TimeseriesTools.centralderiv!-Tuple"><code>TimeseriesTools.centralderiv!</code></a></li><li><a href="#TimeseriesTools.centraldiff-Tuple"><code>TimeseriesTools.centraldiff</code></a></li><li><a href="#TimeseriesTools.centraldiff!-Tuple"><code>TimeseriesTools.centraldiff!</code></a></li><li><a href="#TimeseriesTools.coarsegrain-Tuple{AbstractArray}"><code>TimeseriesTools.coarsegrain</code></a></li><li><a href="#TimeseriesTools.delayembed"><code>TimeseriesTools.delayembed</code></a></li><li><a href="#TimeseriesTools.duration-Tuple{AbstractTimeSeries}"><code>TimeseriesTools.duration</code></a></li><li><a href="#TimeseriesTools.rectifytime-Tuple{AbstractToolsArray{T, N, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:(AbstractVector)}}), B} where {T, N, B}}"><code>TimeseriesTools.rectifytime</code></a></li><li><a href="#TimeseriesTools.samplingperiod-Tuple{AbstractToolsArray{T, N, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, N, B}}"><code>TimeseriesTools.samplingperiod</code></a></li><li><a href="#TimeseriesTools.samplingrate-Tuple{AbstractToolsArray{T, N, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, N, B}}"><code>TimeseriesTools.samplingrate</code></a></li><li><a href="#TimeseriesTools.stitch-Tuple{AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}, AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}}"><code>TimeseriesTools.stitch</code></a></li><li><a href="#TimeseriesTools.times-Tuple{AbstractTimeSeries}"><code>TimeseriesTools.times</code></a></li><li><a href="#TimeseriesTools.window"><code>TimeseriesTools.window</code></a></li></ul>',1)),e("details",c,[e("summary",null,[s[0]||(s[0]=e("a",{id:"IntervalSets.Interval-Tuple{AbstractTimeSeries}",href:"#IntervalSets.Interval-Tuple{AbstractTimeSeries}"},[e("span",{class:"jlbinding"},"IntervalSets.Interval")],-1)),s[1]||(s[1]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[3]||(s[3]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IntervalSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns an interval representing the range of the <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.AbstractTimeSeries"><code>AbstractTimeSeries</code></a> <code>x</code>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using IntervalSets;</span></span>
<span class="line"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; ts = TimeSeries(t, x);</span></span>
<span class="line"><span>julia&gt; IntervalSets.Interval(ts) == (1..100)</span></span></code></pre></div>`,4)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[2]||(s[2]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L207-L220",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",m,[e("summary",null,[s[4]||(s[4]=e("a",{id:"TimeseriesTools.UnitPower",href:"#TimeseriesTools.UnitPower"},[e("span",{class:"jlbinding"},"TimeseriesTools.UnitPower")],-1)),s[5]||(s[5]=l()),a(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnitPower </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractNormalization</span></span></code></pre></div><p>A normalization that sets the total power of a signal to unity.</p><p><strong>Fields</strong></p><ul><li><p><code>dims</code>: The dimensions to normalize over.</p></li><li><p><code>p</code>: Computed normalization parameters.</p></li><li><p><code>ùëù</code>: A function that returns the power from a given time series.</p></li><li><p><code>ùëì</code>: The normalization method</p></li><li><p><code>ùëì‚Åª¬π</code>: The inverse normalization method.</p></li></ul>',4)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[6]||(s[6]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L234-L246",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",T,[e("summary",null,[s[8]||(s[8]=e("a",{id:"Base.cat-Tuple{DimensionalData.Dimensions.Dimension, AbstractToolsArray, AbstractToolsArray, Vararg{Any}}",href:"#Base.cat-Tuple{DimensionalData.Dimensions.Dimension, AbstractToolsArray, AbstractToolsArray, Vararg{Any}}"},[e("span",{class:"jlbinding"},"Base.cat")],-1)),s[9]||(s[9]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DimensionalData.Dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Concatenate the arrays given in <code>args...</code>, and give the resulting extra axis dimensions <code>D</code>. Note that unlike <code>Base.cat</code> without the first <code>Dim</code> argument, this increments all existing dimensions greater than <code>dims</code> by one (so N n√ón arrays concatenated at <code>dims=1</code> will result in an N√ón√ón array). <code>args...</code> can be a splatted collection of <code>ToolsArray</code>s, but this will give the same behaviour as if <code>args...</code> is a single vector of <code>ToolsArray</code>s; the latter is much more performant.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[10]||(s[10]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L88-L93",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",g,[e("summary",null,[s[12]||(s[12]=e("a",{id:"Base.step-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, N, B}}",href:"#Base.step-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, N, B}}"},[e("span",{class:"jlbinding"},"Base.step")],-1)),s[13]||(s[13]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the step size (time increment) of a regularly sampled <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.RegularTimeSeries"><code>RegularTimeSeries</code></a>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; rts = TimeSeries(t, x);</span></span>
<span class="line"><span>julia&gt; step(rts) == 1</span></span></code></pre></div>`,4)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[14]||(s[14]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L147-L159",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",k,[e("summary",null,[s[16]||(s[16]=e("a",{id:"TimeseriesTools.align-Tuple{AbstractDimArray, Any, Union{Tuple, AbstractVector}}",href:"#TimeseriesTools.align-Tuple{AbstractDimArray, Any, Union{Tuple, AbstractVector}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.align")],-1)),s[17]||(s[17]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDimArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ts, dt; dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Align a <code>DimArray</code> <code>x</code> to each of a set of dimension values <code>ts</code>, selecting a window given by <code>dt</code> centered at each element of <code>ts</code>. <code>dt</code> can be a two-element vector/tuple, or an interval. The <code>dims</code> argument specifies the dimension along which the alignment is performed. Each element of the resulting <code>DimArray</code> is an aligned portion of the original <code>x</code>.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[18]||(s[18]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L714-L721",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",u,[e("summary",null,[s[20]||(s[20]=e("a",{id:"TimeseriesTools.buffer-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, N, B}, Vararg{Any}}",href:"#TimeseriesTools.buffer-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, N, B}, Vararg{Any}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.buffer")],-1)),s[21]||(s[21]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Buffer a time series <code>x</code> with a given window length and overlap between successive buffers.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: The regular time series to be buffered.</p></li><li><p><code>n</code>: The number of samples in each buffer.</p></li><li><p><code>p</code>: The number of samples of overlap betweeen the buffers.</p><ul><li><p><code>0</code> indicates no overlap</p></li><li><p>+<code>2</code> indicates <code>2</code> samples of overlap between successive buffers</p></li><li><p>-<code>2</code> indicates <code>2</code> samples of gap between buffers</p></li></ul></li></ul><p>See also: <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.window"><code>window</code></a>, <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.delayembed"><code>delayembed</code></a>, <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.coarsegrain-Tuple{AbstractArray}"><code>coarsegrain</code></a></p>',5)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[22]||(s[22]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L329-L343",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",b,[e("summary",null,[s[24]||(s[24]=e("a",{id:"TimeseriesTools.centralderiv!-Tuple",href:"#TimeseriesTools.centralderiv!-Tuple"},[e("span",{class:"jlbinding"},"TimeseriesTools.centralderiv!")],-1)),s[25]||(s[25]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[27]||(s[27]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centralderiv!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the central derivative of a regular time series <code>x</code>, in-place. See <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.centraldiff!-Tuple"><code>centraldiff!</code></a> for available keyword arguments.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[26]||(s[26]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L571-L576",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",y,[e("summary",null,[s[28]||(s[28]=e("a",{id:"TimeseriesTools.centralderiv-Tuple",href:"#TimeseriesTools.centralderiv-Tuple"},[e("span",{class:"jlbinding"},"TimeseriesTools.centralderiv")],-1)),s[29]||(s[29]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centralderiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the central derivative of a time series <code>x</code>. See <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.centraldiff-Tuple"><code>centraldiff</code></a> for available keyword arguments. Also c.f. <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.centralderiv!-Tuple"><code>centralderiv!</code></a>.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[30]||(s[30]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L591-L597",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",f,[e("summary",null,[s[32]||(s[32]=e("a",{id:"TimeseriesTools.centraldiff!-Tuple",href:"#TimeseriesTools.centraldiff!-Tuple"},[e("span",{class:"jlbinding"},"TimeseriesTools.centraldiff!")],-1)),s[33]||(s[33]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centraldiff!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ùë°, grad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the central difference of a regular time series <code>x</code>, in-place. The first and last elements are set to the forward and backward difference, respectively. The dimension to perform differencing over can be specified as <code>dims</code>, and the differencing function can be specified as <code>grad</code> (defaulting to the euclidean distance, <code>-</code>)</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[34]||(s[34]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L534-L540",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",D,[e("summary",null,[s[36]||(s[36]=e("a",{id:"TimeseriesTools.centraldiff-Tuple",href:"#TimeseriesTools.centraldiff-Tuple"},[e("span",{class:"jlbinding"},"TimeseriesTools.centraldiff")],-1)),s[37]||(s[37]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[39]||(s[39]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centraldiff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ùë°, grad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the central difference of a regular time series <code>x</code>. The first and last elements are set to the forward and backward difference, respectively. The dimension to perform differencing over can be specified as <code>dims</code>, and the differencing function can be specified as <code>grad</code> (defaulting to the euclidean distance, <code>-</code>) See <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.centraldiff!-Tuple"><code>centraldiff!</code></a>.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[38]||(s[38]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L548-L555",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",A,[e("summary",null,[s[40]||(s[40]=e("a",{id:"TimeseriesTools.coarsegrain-Tuple{AbstractArray}",href:"#TimeseriesTools.coarsegrain-Tuple{AbstractArray}"},[e("span",{class:"jlbinding"},"TimeseriesTools.coarsegrain")],-1)),s[41]||(s[41]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[43]||(s[43]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coarsegrain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, newdim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ndims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Coarse-grain an array by taking every second element over the given dimensions <code>dims</code> and concatenating them in the dimension <code>newdim</code>. <code>dims</code> are coarse-grained in sequence, from last to first. If <code>dims</code> is not specified, we iterate over all dimensions that are not <code>newdim</code>. If the array has an odd number of slices in any <code>dims</code>, the last slice is discarded. This is more flexibile than the conventional, mean-based definition of coarse graining: it can be used to generate coarse-grained distributions from an array. To recover this conventional mean-based coarse-graining:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coarsegrain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(C, dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ndims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(C))</span></span></code></pre></div>`,3)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[42]||(s[42]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L775-L783",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",E,[e("summary",null,[s[44]||(s[44]=e("a",{id:"TimeseriesTools.delayembed",href:"#TimeseriesTools.delayembed"},[e("span",{class:"jlbinding"},"TimeseriesTools.delayembed")],-1)),s[45]||(s[45]=l()),a(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[47]||(s[47]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">delayembed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnivariateRegular</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, œÑ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Delay embed a univariate time series <code>x</code> with a given dimension <code>n</code>, delay <code>œÑ</code>, and skip length of <code>p</code></p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: The regular time series to be delay embedded.</p></li><li><p><code>n</code>: The embedding dimension, i.e., the number of samples in each embedded vector.</p></li><li><p><code>œÑ</code>: The number of original sampling periods between each sample in the embedded vectors.</p></li><li><p><code>p</code>: The number of samples to skip between each successive embedded vector.</p></li></ul><p>See also: <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.buffer-Tuple{AbstractToolsArray{T, N, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, N, B}, Vararg{Any}}"><code>buffer</code></a>, <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.window"><code>window</code></a></p>',5)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[46]||(s[46]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L374-L386",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",j,[e("summary",null,[s[48]||(s[48]=e("a",{id:"TimeseriesTools.duration-Tuple{AbstractTimeSeries}",href:"#TimeseriesTools.duration-Tuple{AbstractTimeSeries}"},[e("span",{class:"jlbinding"},"TimeseriesTools.duration")],-1)),s[49]||(s[49]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[51]||(s[51]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the duration of the <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.AbstractTimeSeries"><code>AbstractTimeSeries</code></a> <code>x</code>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; ts = TimeSeries(t, x);</span></span>
<span class="line"><span>julia&gt; TimeseriesTools.duration(ts) == 99</span></span></code></pre></div>`,4)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[50]||(s[50]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L192-L204",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",v,[e("summary",null,[s[52]||(s[52]=e("a",{id:"TimeseriesTools.rectifytime-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractVector}}, B} where {T, N, B}}",href:"#TimeseriesTools.rectifytime-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractVector}}, B} where {T, N, B}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.rectifytime")],-1)),s[53]||(s[53]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[55]||(s[55]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rectifytime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IrregularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; tol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Rectifies the time values of an <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.IrregularTimeSeries"><code>IrregularTimeSeries</code></a>. Checks if the time step of the input time series is approximately constant. If it is, the function rounds the time step and constructs a <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.RegularTimeSeries"><code>RegularTimeSeries</code></a> with range time indices. If the time step is not approximately constant, a warning is issued and the rectification is skipped.</p><p><strong>Arguments</strong></p><ul><li><p><code>X::IrregularTimeSeries</code>: The input time series.</p></li><li><p><code>tol::Int</code>: The number of significant figures for rounding the time step. Default is 6.</p></li><li><p><code>zero::Bool</code>: If <code>true</code>, the rectified time values will start from zero. Default is <code>false</code>.</p></li></ul>',4)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[54]||(s[54]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L448-L461",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",C,[e("summary",null,[s[56]||(s[56]=e("a",{id:"TimeseriesTools.samplingperiod-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, N, B}}",href:"#TimeseriesTools.samplingperiod-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, N, B}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.samplingperiod")],-1)),s[57]||(s[57]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">samplingperiod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the sampling period (step size) of a regularly sampled <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.RegularTimeSeries"><code>RegularTimeSeries</code></a>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; rts = TimeSeries(t, x);</span></span>
<span class="line"><span>julia&gt; samplingperiod(rts) == 1</span></span></code></pre></div>`,4)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[58]||(s[58]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L177-L189",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",_,[e("summary",null,[s[60]||(s[60]=e("a",{id:"TimeseriesTools.samplingrate-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, N, B}}",href:"#TimeseriesTools.samplingrate-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, N, B}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.samplingrate")],-1)),s[61]||(s[61]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[63]||(s[63]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">samplingrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the sampling rate (inverse of the step size) of a regularly sampled <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.RegularTimeSeries"><code>RegularTimeSeries</code></a>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; rts = TimeSeries(t, x);</span></span>
<span class="line"><span>julia&gt; samplingrate(rts) == 1</span></span></code></pre></div>`,4)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[62]||(s[62]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L162-L174",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",F,[e("summary",null,[s[64]||(s[64]=e("a",{id:"TimeseriesTools.stitch-Tuple{AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, B}, AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, B}}",href:"#TimeseriesTools.stitch-Tuple{AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, B}, AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, B}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.stitch")],-1)),s[65]||(s[65]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[67]||(s[67]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stitch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Stitch multiple time series together by concatenatign along the time dimension generating new contiguous time indices. The time series must be of the same type (<code>UnivariateRegular</code>, <code>MultivariateRegular</code>, or <code>AbstractArray</code>), and the sampling period and dimensions of the data arrays must match. If the arguments are `MultivariateRegular, they must have the same dimensions (except for the time dimension).</p><p><strong>Arguments</strong></p><ul><li><p><code>X</code>: The first time series.</p></li><li><p><code>args...</code>: Additional time series.</p></li></ul><p><strong>Returns</strong></p><ul><li>A new time series containing the concatenated data.</li></ul>',6)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[66]||(s[66]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L747-L758",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",w,[e("summary",null,[s[68]||(s[68]=e("a",{id:"TimeseriesTools.times-Tuple{AbstractTimeSeries}",href:"#TimeseriesTools.times-Tuple{AbstractTimeSeries}"},[e("span",{class:"jlbinding"},"TimeseriesTools.times")],-1)),s[69]||(s[69]=l()),a(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[71]||(s[71]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">times</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the time indices of the <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.AbstractTimeSeries"><code>AbstractTimeSeries</code></a> <code>x</code>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; ts = TimeSeries(t, x);</span></span>
<span class="line"><span>julia&gt; times(ts) == t</span></span></code></pre></div>`,4)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[70]||(s[70]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L132-L144",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",S,[e("summary",null,[s[72]||(s[72]=e("a",{id:"TimeseriesTools.window",href:"#TimeseriesTools.window"},[e("span",{class:"jlbinding"},"TimeseriesTools.window")],-1)),s[73]||(s[73]=l()),a(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[75]||(s[75]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Window a time series <code>x</code> with a given window length and step between successive windows.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: The regular time series to be windows.</p></li><li><p><code>n</code>: The number of samples in each window.</p></li><li><p><code>p</code>: The number of samples to slide each successive window.</p></li></ul><p>See also: <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.buffer-Tuple{AbstractToolsArray{T, N, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, N, B}, Vararg{Any}}"><code>buffer</code></a>, <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.delayembed"><code>delayembed</code></a>, <a href="/TimeseriesTools.jl/dev/utils#TimeseriesTools.coarsegrain-Tuple{AbstractArray}"><code>coarsegrain</code></a></p>',5)),a(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[74]||(s[74]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/27480a952a2563164a0f8face391a72c9794fc11/src/Utils.jl#L352-L363",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const M=o(h,[["render",x]]);export{P as __pageData,M as default};
