import{_ as o,C as r,c as p,o as d,aA as a,j as e,G as t,a as l,w as n}from"./chunks/framework.COI-rPE_.js";const K=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"others.md","filePath":"others.md","lastUpdated":null}'),h={name:"others.md"},u={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""};function G(J,s,Q,W,$,H){const i=r("Badge");return d(),p("div",null,[s[124]||(s[124]=a('<ul><li><a href="#TimeseriesTools.AbstractSpectrum"><code>TimeseriesTools.AbstractSpectrum</code></a></li><li><a href="#TimeseriesTools.FreqIndex"><code>TimeseriesTools.FreqIndex</code></a></li><li><a href="#TimeseriesTools.MultivariateSpectrum"><code>TimeseriesTools.MultivariateSpectrum</code></a></li><li><a href="#TimeseriesTools.RegularFreqIndex"><code>TimeseriesTools.RegularFreqIndex</code></a></li><li><a href="#TimeseriesTools.RegularSpectrum"><code>TimeseriesTools.RegularSpectrum</code></a></li><li><a href="#TimeseriesTools.UnitfulIndex"><code>TimeseriesTools.UnitfulIndex</code></a></li><li><a href="#TimeseriesTools.UnitfulSpectrum"><code>TimeseriesTools.UnitfulSpectrum</code></a></li><li><a href="#TimeseriesTools.UnitfulTimeIndex"><code>TimeseriesTools.UnitfulTimeIndex</code></a></li><li><a href="#TimeseriesTools.UnitfulTimeSeries"><code>TimeseriesTools.UnitfulTimeSeries</code></a></li><li><a href="#TimeseriesTools.UnivariateSpectrum"><code>TimeseriesTools.UnivariateSpectrum</code></a></li><li><a href="#TimeseriesTools.ùëì"><code>TimeseriesTools.ùëì</code></a></li><li><a href="#TimeseriesTools.Spectrum-Tuple{Any, Any}"><code>TimeseriesTools.Spectrum</code></a></li><li><a href="#TimeseriesTools.Spectrum-Tuple{Any, Any, Any}"><code>TimeseriesTools.Spectrum</code></a></li><li><a href="#TimeseriesTools.TimeSeries-Tuple{Any, Any, Unitful.Units}"><code>TimeseriesTools.TimeSeries</code></a></li><li><a href="#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}, Vararg{Any}}"><code>TimeseriesTools._energyspectrum</code></a></li><li><a href="#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 2, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:DimensionalData.Dimensions.TimeDim, B} where {T, B}, Vararg{Any}}"><code>TimeseriesTools._energyspectrum</code></a></li><li><a href="#TimeseriesTools._powerspectrum-Tuple{AbstractTimeSeries, Vararg{Any}}"><code>TimeseriesTools._powerspectrum</code></a></li><li><a href="#TimeseriesTools.closeneighbours-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T&lt;:Real"><code>TimeseriesTools.closeneighbours</code></a></li><li><a href="#TimeseriesTools.colorednoise-Tuple{AbstractRange, Vararg{Any}}"><code>TimeseriesTools.colorednoise</code></a></li><li><a href="#TimeseriesTools.convertconst-Tuple{Number, Unitful.Quantity}"><code>TimeseriesTools.convertconst</code></a></li><li><a href="#TimeseriesTools.dimunit-Tuple{AbstractToolsArray, Any}"><code>TimeseriesTools.dimunit</code></a></li><li><a href="#TimeseriesTools.energyspectrum-Tuple{Any, Vararg{Any}}"><code>TimeseriesTools.energyspectrum</code></a></li><li><a href="#TimeseriesTools.frequnit-Tuple{AbstractSpectrum}"><code>TimeseriesTools.frequnit</code></a></li><li><a href="#TimeseriesTools.gammarenewal-Tuple{Any, Vararg{Any}}"><code>TimeseriesTools.gammarenewal</code></a></li><li><a href="#TimeseriesTools.gammarenewal!-Tuple{AbstractVector, Any, Any}"><code>TimeseriesTools.gammarenewal!</code></a></li><li><a href="#TimeseriesTools.pointprocess!-Tuple{Any, Distributions.Distribution}"><code>TimeseriesTools.pointprocess!</code></a></li><li><a href="#TimeseriesTools.powerspectrum-Tuple{AbstractTimeSeries, Vararg{Any}}"><code>TimeseriesTools.powerspectrum</code></a></li><li><a href="#TimeseriesTools.stoic-Tuple{Any, Any}"><code>TimeseriesTools.stoic</code></a></li><li><a href="#TimeseriesTools.sttc-Tuple{Any, Any}"><code>TimeseriesTools.sttc</code></a></li><li><a href="#TimeseriesTools.timeunit-Tuple{AbstractTimeSeries}"><code>TimeseriesTools.timeunit</code></a></li><li><a href="#Unitful.unit-Tuple{Union{AbstractTimeSeries, AbstractSpectrum}}"><code>Unitful.unit</code></a></li></ul>',1)),e("details",u,[e("summary",null,[s[0]||(s[0]=e("a",{id:"TimeseriesTools.closeneighbours-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T<:Real",href:"#TimeseriesTools.closeneighbours-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T<:Real"},[e("span",{class:"jlbinding"},"TimeseriesTools.closeneighbours")],-1)),s[1]||(s[1]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[3]||(s[3]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">closeneighbours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y; Œît)</span></span></code></pre></div><p>Constructs a sparse matrix of distances between neighbouring spikes in two sorted spike trains.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: A sorted array representing the first spike train.</p></li><li><p><code>y</code>: A sorted array representing the second spike train.</p></li><li><p><code>Œît</code>: The maximum time difference allowed for two spikes to be considered neighbours.</p></li></ul><p><strong>Returns</strong></p><p>A sparse matrix <code>D</code> where <code>D[i, j]</code> represents the distance between the <code>i</code>-th spike in <code>x</code> and the <code>j</code>-th spike in <code>y</code>, for pairs of spikes within <code>Œît</code> of each other.</p>',6)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[2]||(s[2]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/SpikeTrains.jl#L158-L170",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",c,[e("summary",null,[s[4]||(s[4]=e("a",{id:"TimeseriesTools.gammarenewal!-Tuple{AbstractVector, Any, Any}",href:"#TimeseriesTools.gammarenewal!-Tuple{AbstractVector, Any, Any}"},[e("span",{class:"jlbinding"},"TimeseriesTools.gammarenewal!")],-1)),s[5]||(s[5]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gammarenewal!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spikes, Œ±, Œ∏; t0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> randn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Œ± </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Œ∏, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate a sequence of gamma-distributed renewal spikes.</p><p>Arguments:</p><ul><li><p><code>spikes::AbstractVector</code>: The vector to store the generated spikes.</p></li><li><p><code>Œ±</code>: The shape parameter of the gamma distribution.</p></li><li><p><code>Œ∏</code>: The scale parameter of the gamma distribution.</p></li><li><p><code>t0</code>: The initial time of the spike train. Defaults to a random value drawn from a normal distribution with mean of 0 and standard deviation equal to the mean firing rate.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments to be passed to <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.pointprocess!-Tuple{Any, Distributions.Distribution}"><code>pointprocess!</code></a>.</p></li></ul>',4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[6]||(s[6]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/SpikeTrains.jl#L273-L285",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",m,[e("summary",null,[s[8]||(s[8]=e("a",{id:"TimeseriesTools.gammarenewal-Tuple{Any, Vararg{Any}}",href:"#TimeseriesTools.gammarenewal-Tuple{Any, Vararg{Any}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.gammarenewal")],-1)),s[9]||(s[9]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gammarenewal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N, Œ±, Œ∏; t0)</span></span></code></pre></div><p>Generate a spike train with inter-spike intervals drawn from a Gamma process.</p><p><strong>Arguments</strong></p><ul><li><p><code>N</code>: Number of spikes to generate.</p></li><li><p><code>Œ±</code>: Shape parameter of the gamma distribution (equivalent to the mean ISI divided by the</p></li></ul><p>Fano factor).</p><ul><li><p><code>Œ∏</code>: Scale parameter of the gamma distribution (equivalent to the Fano factor).</p></li><li><p><code>t0</code>: The initial time of the spike train, prior to the first sampled spike. Defaults to a</p></li></ul><p>random value drawn from a normal distribution with mean of 0 and standard deviation equal to the mean firing rate.</p><p><strong>Returns</strong></p><ul><li>A <a href="/TimeseriesTools.jl/dev/types#TimeseriesTools.SpikeTrain"><code>SpikeTrain</code></a> containing the generated spike times.</li></ul><p>See also <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.gammarenewal!-Tuple{AbstractVector, Any, Any}"><code>gammarenewal!</code></a>.</p>',10)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[10]||(s[10]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/SpikeTrains.jl#L293-L311",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",T,[e("summary",null,[s[12]||(s[12]=e("a",{id:"TimeseriesTools.pointprocess!-Tuple{Any, Distributions.Distribution}",href:"#TimeseriesTools.pointprocess!-Tuple{Any, Distributions.Distribution}"},[e("span",{class:"jlbinding"},"TimeseriesTools.pointprocess!")],-1)),s[13]||(s[13]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pointprocess!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spikes, D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; rng </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Random</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">default_rng</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), t0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Simulate a point process by sampling inter-spike intervals from a given distribution.</p><p><strong>Arguments</strong></p><ul><li><p><code>spikes</code>: An array to store the generated spike times.</p></li><li><p><code>D::Distribution</code>: The distribution from which to sample inter-spike intervals.</p></li><li><p><code>rng</code>: (optional) The random number generator to use. Defaults to <code>Random.default_rng()</code>.</p></li><li><p><code>t0</code>: (optional) The initial time. Defaults to <code>0.0</code>.</p></li></ul>',4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[14]||(s[14]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/SpikeTrains.jl#L252-L262",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",g,[e("summary",null,[s[16]||(s[16]=e("a",{id:"TimeseriesTools.stoic-Tuple{Any, Any}",href:"#TimeseriesTools.stoic-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"TimeseriesTools.stoic")],-1)),s[17]||(s[17]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stoic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b; kpi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npi, œÉ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Œît </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> œÉ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the spike-train overlap-integral coefficient between two spike trains, after normalizing both convolutions to unit energy</p><p>See the unnamed metric from &quot;Schreiber S, Fellous JM, Whitmer JH, Tiesinga PHE, Sejnowski TJ (2003). A new correlation based measure of spike timing reliability. Neurocomputing 52:925-931.&quot;</p><p><strong>Arguments</strong></p><ul><li><p><code>a</code>: Spike train a.</p></li><li><p><code>b</code>: Spike train b.</p></li><li><p><code>kpi</code>: Kernel product integral, a function of the distance between two spikes. Default is <code>npi</code>, the integral of two gaussians with equal variance at a given distance from each other.</p></li><li><p><code>œÉ</code>: Width parameter of the kernel. For <code>npi</code>, this is the width of the unit-mass Gaussian kernels. Default is <code>0.025</code>.</p></li><li><p><code>Œît</code>: Time window for considering spikes as close. Default is <code>œÉ * 10</code>.</p></li></ul>',5)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[18]||(s[18]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/SpikeTrains.jl#L187-L201",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",k,[e("summary",null,[s[20]||(s[20]=e("a",{id:"TimeseriesTools.sttc-Tuple{Any, Any}",href:"#TimeseriesTools.sttc-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"TimeseriesTools.sttc")],-1)),s[21]||(s[21]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sttc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b; Œît </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The spike-time tiling coefficient, a measure of correlation between spike trains [1].</p><p><strong>Arguments</strong></p><ul><li><p><code>a::Vector{&lt;:Real}</code>: A sorted vector of spike times.</p></li><li><p><code>b::Vector{&lt;:Real}</code>: A second sorted vector of spike times .</p></li><li><p><code>Œît::Real=0.025</code>: The time window for calculating the STTC.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>sttc::Real</code>: The STTC value.</li></ul><p><strong>References</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[1] [Cutts &amp; Eglen 2014](https://doi.org/10.1523%2FJNEUROSCI.2767-14.2014)</span></span></code></pre></div>',8)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[22]||(s[22]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/SpikeTrains.jl#L33-L48",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",b,[e("summary",null,[s[24]||(s[24]=e("a",{id:"TimeseriesTools.AbstractSpectrum",href:"#TimeseriesTools.AbstractSpectrum"},[e("span",{class:"jlbinding"},"TimeseriesTools.AbstractSpectrum")],-1)),s[25]||(s[25]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[27]||(s[27]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractSpectrum{T, N, B}</span></span></code></pre></div><p>A type alias for an <code>AbstractToolsArray</code> in which the first dimension is <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.ùëì"><code>ùëì</code></a>requency.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[26]||(s[26]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L27-L31",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",y,[e("summary",null,[s[28]||(s[28]=e("a",{id:"TimeseriesTools.FreqIndex",href:"#TimeseriesTools.FreqIndex"},[e("span",{class:"jlbinding"},"TimeseriesTools.FreqIndex")],-1)),s[29]||(s[29]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[31]||(s[31]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FreqIndex</span></span></code></pre></div><p>A type alias for a tuple of dimensions, where the first dimension is of type <code>FrequencyDim</code>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[30]||(s[30]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L20-L24",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",f,[e("summary",null,[s[32]||(s[32]=e("a",{id:"TimeseriesTools.MultivariateSpectrum",href:"#TimeseriesTools.MultivariateSpectrum"},[e("span",{class:"jlbinding"},"TimeseriesTools.MultivariateSpectrum")],-1)),s[33]||(s[33]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[35]||(s[35]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MultivariateSpectrum{T} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractSpectrum{T, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span></span></code></pre></div><p>A type alias for a multivariate spectrum.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[34]||(s[34]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L57-L61",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",E,[e("summary",null,[s[36]||(s[36]=e("a",{id:"TimeseriesTools.RegularFreqIndex",href:"#TimeseriesTools.RegularFreqIndex"},[e("span",{class:"jlbinding"},"TimeseriesTools.RegularFreqIndex")],-1)),s[37]||(s[37]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[39]||(s[39]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RegularFreqIndex</span></span></code></pre></div><p>A type alias for a tuple of dimensions, where the first dimension is a regularly sampled <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.ùëì"><code>ùëì</code></a>requency.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[38]||(s[38]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L35-L39",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",j,[e("summary",null,[s[40]||(s[40]=e("a",{id:"TimeseriesTools.RegularSpectrum",href:"#TimeseriesTools.RegularSpectrum"},[e("span",{class:"jlbinding"},"TimeseriesTools.RegularSpectrum")],-1)),s[41]||(s[41]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[43]||(s[43]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RegularSpectrum{T, N, B}</span></span></code></pre></div><p>A type alias for a spectrum with a regularly sampled frequency index.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[42]||(s[42]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L44-L48",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",A,[e("summary",null,[s[44]||(s[44]=e("a",{id:"TimeseriesTools.UnivariateSpectrum",href:"#TimeseriesTools.UnivariateSpectrum"},[e("span",{class:"jlbinding"},"TimeseriesTools.UnivariateSpectrum")],-1)),s[45]||(s[45]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[47]||(s[47]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnivariateSpectrum{T} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractSpectrum{T, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span></span></code></pre></div><p>A type alias for a univariate spectrum.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[46]||(s[46]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L51-L55",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",_,[e("summary",null,[s[48]||(s[48]=e("a",{id:"TimeseriesTools.ùëì",href:"#TimeseriesTools.ùëì"},[e("span",{class:"jlbinding"},"TimeseriesTools.ùëì")],-1)),s[49]||(s[49]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[51]||(s[51]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ùëì</span></span></code></pre></div><p>A DimensionalData.jl dimension representing the frequency domain.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[50]||(s[50]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L13-L17",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",v,[e("summary",null,[s[52]||(s[52]=e("a",{id:"TimeseriesTools.Spectrum-Tuple{Any, Any, Any}",href:"#TimeseriesTools.Spectrum-Tuple{Any, Any, Any}"},[e("span",{class:"jlbinding"},"TimeseriesTools.Spectrum")],-1)),s[53]||(s[53]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[55]||(s[55]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, v, x)</span></span></code></pre></div><p>Constructs a multivariate spectrum with frequencies <code>f</code>, variables <code>v</code>, and data <code>x</code>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[54]||(s[54]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L71-L75",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",C,[e("summary",null,[s[56]||(s[56]=e("a",{id:"TimeseriesTools.Spectrum-Tuple{Any, Any}",href:"#TimeseriesTools.Spectrum-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"TimeseriesTools.Spectrum")],-1)),s[57]||(s[57]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, x)</span></span></code></pre></div><p>Constructs a univariate spectrum with frequencies <code>f</code> and data <code>x</code>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[58]||(s[58]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L64-L68",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",S,[e("summary",null,[s[60]||(s[60]=e("a",{id:"TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, B}, Vararg{Any}}",href:"#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, B}, Vararg{Any}}"},[e("span",{class:"jlbinding"},"TimeseriesTools._energyspectrum")],-1)),s[61]||(s[61]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[63]||(s[63]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_energyspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">samplingrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">√∑</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Computes the energy spectrum of a regularly sampled time series <code>x</code> with an optional minimum frequency <code>f_min</code>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[62]||(s[62]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L137-L141",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",x,[e("summary",null,[s[64]||(s[64]=e("a",{id:"TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 2, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, B}, Vararg{Any}}",href:"#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 2, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, B}, Vararg{Any}}"},[e("span",{class:"jlbinding"},"TimeseriesTools._energyspectrum")],-1)),s[65]||(s[65]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[67]||(s[67]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_energyspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the energy spectrum of a time series using the fast Fourier transform.</p><p>If <code>f_min &gt; 0</code>, the energy spectrum is calculated for windows of the time series determined by <code>f_min</code>, the minimum frequency that will be resolved in the spectrum. If <code>f_min &gt; 0</code>, the second dimension of the output will correspond to the windows. For an averaged periodogram, see <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.energyspectrum-Tuple{Any, Vararg{Any}}"><code>energyspectrum</code></a>.</p><p>If the input time series is a <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.UnitfulTimeSeries"><code>UnitfulTimeSeries</code></a>, the frequency will also have units. Moreover if the elements of <code>x</code> are unitful, so are the elements of the spectrum.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using TimeseriesTools</span></span>
<span class="line"><span>julia&gt; t = range(0.0, stop=1.0, length=1000);</span></span>
<span class="line"><span>julia&gt; x = sin.(2 * œÄ * 5 * t);</span></span>
<span class="line"><span>julia&gt; ts = RegularTimeSeries(t, x);</span></span>
<span class="line"><span>julia&gt; S = _energyspectrum(ts);</span></span>
<span class="line"><span>julia&gt; S isa MultivariateSpectrum</span></span></code></pre></div>`,6)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[66]||(s[66]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L147-L167",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",D,[e("summary",null,[s[68]||(s[68]=e("a",{id:"TimeseriesTools._powerspectrum-Tuple{AbstractTimeSeries, Vararg{Any}}",href:"#TimeseriesTools._powerspectrum-Tuple{AbstractTimeSeries, Vararg{Any}}"},[e("span",{class:"jlbinding"},"TimeseriesTools._powerspectrum")],-1)),s[69]||(s[69]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[71]||(s[71]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_powerspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">samplingrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">√∑</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the power spectrum of a time series <code>x</code> in Welch periodogram windows. Note that the <code>_powerspectrum</code> is simply the <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}, Vararg{Any}}"><code>_energyspectrum</code></a> divided by the duration of each window. See <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}, Vararg{Any}}"><code>_energyspectrum</code></a>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[70]||(s[70]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L185-L191",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",F,[e("summary",null,[s[72]||(s[72]=e("a",{id:"TimeseriesTools.colorednoise-Tuple{AbstractRange, Vararg{Any}}",href:"#TimeseriesTools.colorednoise-Tuple{AbstractRange, Vararg{Any}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.colorednoise")],-1)),s[73]||(s[73]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[75]||(s[75]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">colorednoise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; Œ±</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate a colored-noise time series with a specified power-law exponent <code>Œ±</code> on the given times <code>ts</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>ts</code>: An <code>AbstractRange</code> representing the time range of the generated noise.</p></li><li><p><code>Œ±</code>: The power-law exponent of the colored noise, which will have a spectrum given by 1/f^Œ±. Defaults to 2.0.</p></li></ul><p><strong>Returns</strong></p><ul><li>A <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.TimeSeries-Tuple{Any, Any, Unitful.Units}"><code>TimeSeries</code></a> containing the generated colored noise.</li></ul><p><strong>Example</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using TimeseriesTools</span></span>
<span class="line"><span>julia&gt; pink_noise = colorednoise(1:0.01:10; Œ±=1.0)</span></span>
<span class="line"><span>julia&gt; pink_noise isa RegularTimeSeries</span></span></code></pre></div>`,8)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[74]||(s[74]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L209-L228",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",w,[e("summary",null,[s[76]||(s[76]=e("a",{id:"TimeseriesTools.energyspectrum-Tuple{Any, Vararg{Any}}",href:"#TimeseriesTools.energyspectrum-Tuple{Any, Vararg{Any}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.energyspectrum")],-1)),s[77]||(s[77]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[79]||(s[79]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">energyspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the average energy spectrum of a regularly sampled time series <code>x</code>. <code>f_min</code> determines the minimum frequency that will be resolved in the spectrum. See <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}, Vararg{Any}}"><code>_energyspectrum</code></a>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[78]||(s[78]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L173-L179",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",V,[e("summary",null,[s[80]||(s[80]=e("a",{id:"TimeseriesTools.powerspectrum-Tuple{AbstractTimeSeries, Vararg{Any}}",href:"#TimeseriesTools.powerspectrum-Tuple{AbstractTimeSeries, Vararg{Any}}"},[e("span",{class:"jlbinding"},"TimeseriesTools.powerspectrum")],-1)),s[81]||(s[81]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[83]||(s[83]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">powerspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">samplingrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">√∑</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the average power spectrum of a time series <code>x</code> using the Welch periodogram method.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[82]||(s[82]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Spectra.jl#L197-L201",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",I,[e("summary",null,[s[84]||(s[84]=e("a",{id:"TimeseriesTools.UnitfulIndex",href:"#TimeseriesTools.UnitfulIndex"},[e("span",{class:"jlbinding"},"TimeseriesTools.UnitfulIndex")],-1)),s[85]||(s[85]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[87]||(s[87]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnitfulIndex</span></span></code></pre></div><p>A type alias for a union of <code>AbstractArray</code>, <code>AbstractRange</code>, and <code>Tuple</code> types with <code>Unitful.Time</code> elements.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[86]||(s[86]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L28-L32",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",U,[e("summary",null,[s[88]||(s[88]=e("a",{id:"TimeseriesTools.UnitfulSpectrum",href:"#TimeseriesTools.UnitfulSpectrum"},[e("span",{class:"jlbinding"},"TimeseriesTools.UnitfulSpectrum")],-1)),s[89]||(s[89]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[91]||(s[91]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnitfulSpectrum{T,N,B}</span></span></code></pre></div><p>A type representing spectra with unitful frequency units.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[90]||(s[90]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L67-L71",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",R,[e("summary",null,[s[92]||(s[92]=e("a",{id:"TimeseriesTools.UnitfulTimeIndex",href:"#TimeseriesTools.UnitfulTimeIndex"},[e("span",{class:"jlbinding"},"TimeseriesTools.UnitfulTimeIndex")],-1)),s[93]||(s[93]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[95]||(s[95]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnitfulTimeIndex</span></span></code></pre></div><p>A type alias for a tuple of dimensions, where the first dimension is of type <code>DimensionalData.Dimension{&lt;:UnitfulIndex}</code>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[94]||(s[94]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L36-L40",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",B,[e("summary",null,[s[96]||(s[96]=e("a",{id:"TimeseriesTools.UnitfulTimeSeries",href:"#TimeseriesTools.UnitfulTimeSeries"},[e("span",{class:"jlbinding"},"TimeseriesTools.UnitfulTimeSeries")],-1)),s[97]||(s[97]=l()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[99]||(s[99]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnitfulTimeSeries{T, N, B}</span></span></code></pre></div><p>A type alias for an <code>AbstractToolsArray</code> with a <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.UnitfulTimeIndex"><code>UnitfulTimeIndex</code></a>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using Unitful;</span></span>
<span class="line"><span>julia&gt; t = (1:100)u&quot;s&quot;;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; uts = TimeSeries(t, x);</span></span>
<span class="line"><span>julia&gt; uts isa UnitfulTimeSeries</span></span></code></pre></div>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[98]||(s[98]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L45-L58",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",q,[e("summary",null,[s[100]||(s[100]=e("a",{id:"TimeseriesTools.TimeSeries-Tuple{Any, Any, Unitful.Units}",href:"#TimeseriesTools.TimeSeries-Tuple{Any, Any, Unitful.Units}"},[e("span",{class:"jlbinding"},"TimeseriesTools.TimeSeries")],-1)),s[101]||(s[101]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[103]||(s[103]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t, x, timeunit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Units</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constructs a univariate time series with time <code>t</code>, data <code>x</code> and time units specified by <code>timeunit</code>. Note that you can add units to the elements of a time series <code>x</code> with, for example, <code>x*u&quot;V&quot;</code>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using Unitful;</span></span>
<span class="line"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; ts = TimeSeries(t, x, u&quot;ms&quot;)*u&quot;V&quot;;</span></span>
<span class="line"><span>julia&gt; ts isa Union{UnivariateTimeSeries, RegularTimeSeries, UnitfulTimeSeries}</span></span></code></pre></div>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[102]||(s[102]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L92-L106",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",L,[e("summary",null,[s[104]||(s[104]=e("a",{id:"TimeseriesTools.convertconst-Tuple{Number, Unitful.Quantity}",href:"#TimeseriesTools.convertconst-Tuple{Number, Unitful.Quantity}"},[e("span",{class:"jlbinding"},"TimeseriesTools.convertconst")],-1)),s[105]||(s[105]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[107]||(s[107]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TimeseriesTools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convertconst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, u</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Converts a constant <code>c</code> to have the same units as <code>u</code>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using Unitful;</span></span>
<span class="line"><span>julia&gt; c = 5;</span></span>
<span class="line"><span>julia&gt; u = 3u&quot;s&quot;;</span></span>
<span class="line"><span>julia&gt; converted_c = TimeseriesTools.convertconst(c, u);</span></span>
<span class="line"><span>julia&gt; typeof(converted_c) == typeof(u)</span></span></code></pre></div>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[106]||(s[106]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L12-L25",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",P,[e("summary",null,[s[108]||(s[108]=e("a",{id:"TimeseriesTools.dimunit-Tuple{AbstractToolsArray, Any}",href:"#TimeseriesTools.dimunit-Tuple{AbstractToolsArray, Any}"},[e("span",{class:"jlbinding"},"TimeseriesTools.dimunit")],-1)),s[109]||(s[109]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[111]||(s[111]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dimunit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitfulTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim)</span></span></code></pre></div><p>Returns the unit associated with the specified dimension <code>dim</code> of a <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.UnitfulTimeSeries"><code>UnitfulTimeSeries</code></a>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using Unitful;</span></span>
<span class="line"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; ts = TimeSeries(t, x, u&quot;ms&quot;);</span></span>
<span class="line"><span>julia&gt; TimeseriesTools.dimunit(ts, ùë°) == u&quot;ms&quot;</span></span></code></pre></div>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[110]||(s[110]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L110-L123",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",N,[e("summary",null,[s[112]||(s[112]=e("a",{id:"TimeseriesTools.frequnit-Tuple{AbstractSpectrum}",href:"#TimeseriesTools.frequnit-Tuple{AbstractSpectrum}"},[e("span",{class:"jlbinding"},"TimeseriesTools.frequnit")],-1)),s[113]||(s[113]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[115]||(s[115]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frequnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitfulSpectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the frequency units associated with a <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.UnitfulSpectrum"><code>UnitfulSpectrum</code></a>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using Unitful;</span></span>
<span class="line"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; ts = TimeSeries(t, x, u&quot;ms&quot;);</span></span>
<span class="line"><span>julia&gt; sp = fft(ts);  # assuming fft returns a UnitfulSpectrum</span></span>
<span class="line"><span>julia&gt; frequnits(sp) == u&quot;Hz&quot;</span></span></code></pre></div>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[114]||(s[114]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L142-L156",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",M,[e("summary",null,[s[116]||(s[116]=e("a",{id:"TimeseriesTools.timeunit-Tuple{AbstractTimeSeries}",href:"#TimeseriesTools.timeunit-Tuple{AbstractTimeSeries}"},[e("span",{class:"jlbinding"},"TimeseriesTools.timeunit")],-1)),s[117]||(s[117]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[119]||(s[119]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">timeunit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitfulTimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the time units associated with a [<code>UnitfulTimeSeries</code>].</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using Unitful;</span></span>
<span class="line"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; ts = TimeSeries(t, x, u&quot;ms&quot;);</span></span>
<span class="line"><span>julia&gt; timeunit(ts) == u&quot;ms&quot;</span></span></code></pre></div>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[118]||(s[118]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L126-L139",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",O,[e("summary",null,[s[120]||(s[120]=e("a",{id:"Unitful.unit-Tuple{Union{AbstractTimeSeries, AbstractSpectrum}}",href:"#Unitful.unit-Tuple{Union{AbstractTimeSeries, AbstractSpectrum}}"},[e("span",{class:"jlbinding"},"Unitful.unit")],-1)),s[121]||(s[121]=l()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[123]||(s[123]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the units associated with the elements of an <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.UnitfulTimeSeries"><code>UnitfulTimeSeries</code></a> or <a href="/TimeseriesTools.jl/dev/others#TimeseriesTools.UnitfulSpectrum"><code>UnitfulSpectrum</code></a>.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using Unitful;</span></span>
<span class="line"><span>julia&gt; t = 1:100;</span></span>
<span class="line"><span>julia&gt; x = rand(100);</span></span>
<span class="line"><span>julia&gt; ts = TimeSeries(t, x, u&quot;ms&quot;)*u&quot;V&quot;;</span></span>
<span class="line"><span>julia&gt; unit(ts) == u&quot;V&quot;</span></span></code></pre></div>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[122]||(s[122]=[e("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/e45c6e9b08247ea69dbd79be4410a018a5706bb4/src/Unitful.jl#L159-L172",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const X=o(h,[["render",G]]);export{K as __pageData,X as default};
