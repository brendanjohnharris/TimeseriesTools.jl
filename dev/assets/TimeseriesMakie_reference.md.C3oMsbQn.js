import{_ as a,C as n,c as r,o as l,j as o,G as s,a as t,w as d,aA as i}from"./chunks/framework.COI-rPE_.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"TimeseriesMakie/reference.md","filePath":"TimeseriesMakie/reference.md","lastUpdated":null}'),p={name:"TimeseriesMakie/reference.md"},h={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""};function _(C,e,L,A,O,F){const c=n("Badge");return l(),r("div",null,[o("details",h,[o("summary",null,[e[0]||(e[0]=o("a",{id:"TimeseriesMakie.Kinetic",href:"#TimeseriesMakie.Kinetic"},[o("span",{class:"jlbinding"},"TimeseriesMakie.Kinetic")],-1)),e[1]||(e[1]=t()),s(c,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[3]||(e[3]=o("p",null,[o("code",null,"Kinetic"),t(" is the plot type associated with plotting function "),o("code",null,"kinetic"),t(". Check the docstring for "),o("code",null,"kinetic"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[2]||(e[2]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L528",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",g,[o("summary",null,[e[4]||(e[4]=o("a",{id:"TimeseriesMakie.Shadows",href:"#TimeseriesMakie.Shadows"},[o("span",{class:"jlbinding"},"TimeseriesMakie.Shadows")],-1)),e[5]||(e[5]=t()),s(c,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[7]||(e[7]=o("p",null,[o("code",null,"Shadows"),t(" is the plot type associated with plotting function "),o("code",null,"shadows"),t(". Check the docstring for "),o("code",null,"shadows"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[6]||(e[6]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L528",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",u,[o("summary",null,[e[8]||(e[8]=o("a",{id:"TimeseriesMakie.Traces",href:"#TimeseriesMakie.Traces"},[o("span",{class:"jlbinding"},"TimeseriesMakie.Traces")],-1)),e[9]||(e[9]=t()),s(c,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[11]||(e[11]=o("p",null,[o("code",null,"Traces"),t(" is the plot type associated with plotting function "),o("code",null,"traces"),t(". Check the docstring for "),o("code",null,"traces"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[10]||(e[10]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L528",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",m,[o("summary",null,[e[12]||(e[12]=o("a",{id:"TimeseriesMakie.Trail",href:"#TimeseriesMakie.Trail"},[o("span",{class:"jlbinding"},"TimeseriesMakie.Trail")],-1)),e[13]||(e[13]=t()),s(c,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[15]||(e[15]=o("p",null,[o("code",null,"Trail"),t(" is the plot type associated with plotting function "),o("code",null,"trail"),t(". Check the docstring for "),o("code",null,"trail"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[14]||(e[14]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L528",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",f,[o("summary",null,[e[16]||(e[16]=o("a",{id:"TimeseriesMakie.Trajectory",href:"#TimeseriesMakie.Trajectory"},[o("span",{class:"jlbinding"},"TimeseriesMakie.Trajectory")],-1)),e[17]||(e[17]=t()),s(c,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[19]||(e[19]=o("p",null,[o("code",null,"Trajectory"),t(" is the plot type associated with plotting function "),o("code",null,"trajectory"),t(". Check the docstring for "),o("code",null,"trajectory"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[18]||(e[18]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L528",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",b,[o("summary",null,[e[20]||(e[20]=o("a",{id:"TimeseriesMakie.kinetic",href:"#TimeseriesMakie.kinetic"},[o("span",{class:"jlbinding"},"TimeseriesMakie.kinetic")],-1)),e[21]||(e[21]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[23]||(e[23]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kinetic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plots a line with a varying width.</p><p><strong>Key attribtues:</strong></p><p><code>linewidth</code> = <code>:curv</code>:</p><p>Sets the algorithm for determining the line width.</p><ul><li><p><code>:curv</code> - Width is determined by the velocity</p></li><li><p><code>:x</code> - Width is determined by the x-coordinate</p></li><li><p><code>:y</code> - Width is determined by the y-coordinate</p></li><li><p><code>&lt;: Number</code> - Width is set to a constant value</p></li></ul><p><code>linewidthscale</code> = <code>1</code>: Scale factor for the line width.</p><p><em>Other attributes are shared with <code>Makie.Lines</code>.</em></p><p><strong>Plot type</strong></p><p>The plot type alias for the <code>kinetic</code> function is <code>Kinetic</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>1.0</code> — The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>color</code></strong> = <code>@inherit linecolor</code> — <em>No docs available.</em></p><p><strong><code>colormap</code></strong> = <code>@inherit colormap :viridis</code> — Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><p><strong><code>cycle</code></strong> = <code>:color</code> — <em>No docs available.</em></p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>fxaa</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>joinstyle</code></strong> = <code>@inherit joinstyle</code> — Controls the rendering at corners. Options are <code>:miter</code> for sharp corners, <code>:bevel</code> for &quot;cut off&quot; corners, and <code>:round</code> for rounded corners. If the corner angle is below <code>miter_limit</code>, <code>:miter</code> is equivalent to <code>:bevel</code> to avoid long spikes.</p><p><strong><code>linecap</code></strong> = <code>:round</code> — <em>No docs available.</em></p><p><strong><code>linestyle</code></strong> = <code>nothing</code> — Sets the dash pattern of the line. Options are <code>:solid</code> (equivalent to <code>nothing</code>), <code>:dot</code>, <code>:dash</code>, <code>:dashdot</code> and <code>:dashdotdot</code>. These can also be given in a tuple with a gap style modifier, either <code>:normal</code>, <code>:dense</code> or <code>:loose</code>. For example, <code>(:dot, :loose)</code> or <code>(:dashdot, :dense)</code>.</p><p>For custom patterns have a look at <a href="./@ref"><code>Makie.Linestyle</code></a>.</p><p><strong><code>linewidth</code></strong> = <code>:curv</code> — <em>No docs available.</em></p><p><strong><code>linewidthscale</code></strong> = <code>1</code> — <em>No docs available.</em></p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>miter_limit</code></strong> = <code>@inherit miter_limit</code> — Sets the minimum inner join angle below which miter joins truncate. See also <code>Makie.miter_distance_to_angle</code>.</p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>',41)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[22]||(e[22]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L527-L625",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",k,[o("summary",null,[e[24]||(e[24]=o("a",{id:"TimeseriesMakie.kinetic!",href:"#TimeseriesMakie.kinetic!"},[o("span",{class:"jlbinding"},"TimeseriesMakie.kinetic!")],-1)),e[25]||(e[25]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[27]||(e[27]=o("p",null,[o("code",null,"kinetic!"),t(" is the mutating variant of plotting function "),o("code",null,"kinetic"),t(". Check the docstring for "),o("code",null,"kinetic"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[26]||(e[26]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L529",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",y,[o("summary",null,[e[28]||(e[28]=o("a",{id:"TimeseriesMakie.shadows",href:"#TimeseriesMakie.shadows"},[o("span",{class:"jlbinding"},"TimeseriesMakie.shadows")],-1)),e[29]||(e[29]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[31]||(e[31]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shadows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plots shadows of a 3D trajectory onto the enclosing axis panes.</p><p><strong>Key attributes:</strong></p><p><code>mode</code> = <code>:projection</code>: The shadowing mode</p><p><code>swapshadows</code> = <code>automatic</code>: Whether to swap the axes for each shadow.</p><p>Can be:</p><ul><li><p><code>true</code> or <code>false</code>: Swap the axes for all shadows from their default values</p></li><li><p><code>NTuple{3, Bool}</code>: Swap the default axes for each shadow individually (x, y, z)</p></li><li><p><code>automatic</code>: Defaults to <code>(true, true, false)</code></p></li></ul><p><code>limits</code> = <code>automatic</code>: The targeted axis limits. To ensure the shadows align with the axes, it is best to provide the <code>Axis</code> limits here. If <code>automatic</code>, the limits are inferred from the data.</p><p><em>Other attributes are shared with <code>Makie.Lines</code>.</em></p><p><strong>Plot type</strong></p><p>The plot type alias for the <code>shadows</code> function is <code>Shadows</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>1.0</code> — The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>color</code></strong> = <code>@inherit linecolor</code> — The color of the line.</p><p><strong><code>colormap</code></strong> = <code>@inherit colormap :viridis</code> — Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><p><strong><code>cycle</code></strong> = <code>[:color]</code> — Sets which attributes to cycle when creating multiple plots.</p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>fxaa</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>joinstyle</code></strong> = <code>@inherit joinstyle</code> — Controls the rendering at corners. Options are <code>:miter</code> for sharp corners, <code>:bevel</code> for &quot;cut off&quot; corners, and <code>:round</code> for rounded corners. If the corner angle is below <code>miter_limit</code>, <code>:miter</code> is equivalent to <code>:bevel</code> to avoid long spikes.</p><p><strong><code>limits</code></strong> = <code>automatic</code> — The targeted axis limits</p><p><strong><code>linecap</code></strong> = <code>@inherit linecap</code> — Sets the type of line cap used. Options are <code>:butt</code> (flat without extrusion), <code>:square</code> (flat with half a linewidth extrusion) or <code>:round</code>.</p><p><strong><code>linestyle</code></strong> = <code>nothing</code> — Sets the dash pattern of the line. Options are <code>:solid</code> (equivalent to <code>nothing</code>), <code>:dot</code>, <code>:dash</code>, <code>:dashdot</code> and <code>:dashdotdot</code>. These can also be given in a tuple with a gap style modifier, either <code>:normal</code>, <code>:dense</code> or <code>:loose</code>. For example, <code>(:dot, :loose)</code> or <code>(:dashdot, :dense)</code>.</p><p>For custom patterns have a look at <a href="./@ref"><code>Makie.Linestyle</code></a>.</p><p><strong><code>linewidth</code></strong> = <code>@inherit linewidth</code> — Sets the width of the line in screen units</p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>miter_limit</code></strong> = <code>@inherit miter_limit</code> — Sets the minimum inner join angle below which miter joins truncate. See also <code>Makie.miter_distance_to_angle</code>.</p><p><strong><code>mode</code></strong> = <code>:projection</code> — The shadowing mode</p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>swapshadows</code></strong> = <code>automatic</code> — Whether to swap the axes for each shadow</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>',44)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[30]||(e[30]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L527-L632",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",w,[o("summary",null,[e[32]||(e[32]=o("a",{id:"TimeseriesMakie.shadows!",href:"#TimeseriesMakie.shadows!"},[o("span",{class:"jlbinding"},"TimeseriesMakie.shadows!")],-1)),e[33]||(e[33]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[35]||(e[35]=o("p",null,[o("code",null,"shadows!"),t(" is the mutating variant of plotting function "),o("code",null,"shadows"),t(". Check the docstring for "),o("code",null,"shadows"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[34]||(e[34]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L529",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",v,[o("summary",null,[e[36]||(e[36]=o("a",{id:"TimeseriesMakie.traces",href:"#TimeseriesMakie.traces"},[o("span",{class:"jlbinding"},"TimeseriesMakie.traces")],-1)),e[37]||(e[37]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[39]||(e[39]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">traces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, Z; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot the columns of <code>Z</code> over the domain <code>x</code>, colored by <code>y</code>.</p><p><strong>Key attributes:</strong></p><ul><li><p><code>linecolor</code> = <code>automatic</code>: Sets the color of the traces.</p></li><li><p><code>spacing</code> = <code>0</code>: The spacing between traces.</p></li></ul><p>Can be a number in data space, or one of the following modes: - <code>:even</code>: Even spacing equal to the greatest difference between traces. - <code>:close</code>: Successive traces are spaced by the smallest difference between them.</p><ul><li><code>offset</code> = <code>1</code>: The offset factor (offset * spacing)</li></ul><p><em>Other attributes are shared with <code>Makie.Lines</code>.</em></p><p><strong>Plot type</strong></p><p>The plot type alias for the <code>traces</code> function is <code>Traces</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>1.0</code> — The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>colormap</code></strong> = <code>@inherit colormap :viridis</code> — Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><p><strong><code>cycle</code></strong> = <code>[:color]</code> — Sets which attributes to cycle when creating multiple plots.</p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>fxaa</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>joinstyle</code></strong> = <code>@inherit joinstyle</code> — Controls the rendering at corners. Options are <code>:miter</code> for sharp corners, <code>:bevel</code> for &quot;cut off&quot; corners, and <code>:round</code> for rounded corners. If the corner angle is below <code>miter_limit</code>, <code>:miter</code> is equivalent to <code>:bevel</code> to avoid long spikes.</p><p><strong><code>linecap</code></strong> = <code>@inherit linecap</code> — Sets the type of line cap used. Options are <code>:butt</code> (flat without extrusion), <code>:square</code> (flat with half a linewidth extrusion) or <code>:round</code>.</p><p><strong><code>linecolor</code></strong> = <code>automatic</code> — <em>No docs available.</em></p><p><strong><code>linestyle</code></strong> = <code>nothing</code> — Sets the dash pattern of the line. Options are <code>:solid</code> (equivalent to <code>nothing</code>), <code>:dot</code>, <code>:dash</code>, <code>:dashdot</code> and <code>:dashdotdot</code>. These can also be given in a tuple with a gap style modifier, either <code>:normal</code>, <code>:dense</code> or <code>:loose</code>. For example, <code>(:dot, :loose)</code> or <code>(:dashdot, :dense)</code>.</p><p>For custom patterns have a look at <a href="./@ref"><code>Makie.Linestyle</code></a>.</p><p><strong><code>linewidth</code></strong> = <code>@inherit linewidth</code> — Sets the width of the line in screen units</p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>miter_limit</code></strong> = <code>@inherit miter_limit</code> — Sets the minimum inner join angle below which miter joins truncate. See also <code>Makie.miter_distance_to_angle</code>.</p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>offset</code></strong> = <code>1</code> — <em>No docs available.</em></p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>spacing</code></strong> = <code>0</code> — <em>No docs available.</em></p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>',41)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[38]||(e[38]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L527-L625",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",T,[o("summary",null,[e[40]||(e[40]=o("a",{id:"TimeseriesMakie.traces!",href:"#TimeseriesMakie.traces!"},[o("span",{class:"jlbinding"},"TimeseriesMakie.traces!")],-1)),e[41]||(e[41]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[43]||(e[43]=o("p",null,[o("code",null,"traces!"),t(" is the mutating variant of plotting function "),o("code",null,"traces"),t(". Check the docstring for "),o("code",null,"traces"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[42]||(e[42]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L529",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",j,[o("summary",null,[e[44]||(e[44]=o("a",{id:"TimeseriesMakie.trail",href:"#TimeseriesMakie.trail"},[o("span",{class:"jlbinding"},"TimeseriesMakie.trail")],-1)),e[45]||(e[45]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[47]||(e[47]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot a fading trace of points in 2D or 3D space.</p><p><strong>Key attributes:</strong></p><p><code>npoints</code> = <code>automatic</code>: Fixes the length of the trail. By default, this is equal to the length of <code>x</code> and <code>y</code>. If <code>npoints</code> is less than the length of <code>x</code> and <code>y</code>, the last <code>npoints</code> will be plotted.</p><p><code>linecolor</code> = <code>@inherit linecolor</code>: Sets the color of the trail. Should be a single color (e.g. &quot;red&quot;, :red, (:red, 0.2), RGBA(0.1, 0.2, 0.3, 0.4)). This value is overridden by <code>color</code></p><p><code>color</code> = <code>nothing</code>: Specifies the color values for the trail.</p><p>If <code>!isnothing(color)</code>, trail colors will be sampled from the <code>colormap</code> depending on the value of <code>color</code>. <code>color</code> can be:</p><ul><li><p>A collection of numbers representing values to be sampled from the colormap.</p></li><li><p>A function of the index of a point in the trail (e.g. <code>Base.Fix2(^, 3)</code>).</p></li></ul><p><code>colormap</code> = <code>@inherit colormap</code>: Specifies the colormap to use for the trail when <code>!isnothing(color)</code>.</p><p><code>alpha</code> = <code>identity</code>: Controls the transparency profile of the trail. <code>alpha</code> can be:</p><ul><li><p>A single number (e.g. <code>0.5</code>).</p></li><li><p>A function of the index of a point in the trail (e.g. <code>Base.Fix2(^, 3)</code>).</p></li><li><p>A collection of numbers representing alpha values for each point in the trail.</p></li></ul><p>To sidestep alpha normalization, explicitly pass a vector of alpha values.</p><p><em>Other attributes are shared with <code>Makie.Lines</code>.</em></p><p><strong>Plot type</strong></p><p>The plot type alias for the <code>trail</code> function is <code>Trail</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>identity</code> — <em>No docs available.</em></p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>color</code></strong> = <code>nothing</code> — <em>No docs available.</em></p><p><strong><code>colormap</code></strong> = <code>@inherit colormap</code> — <em>No docs available.</em></p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>fxaa</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>joinstyle</code></strong> = <code>@inherit joinstyle</code> — Controls the rendering at corners. Options are <code>:miter</code> for sharp corners, <code>:bevel</code> for &quot;cut off&quot; corners, and <code>:round</code> for rounded corners. If the corner angle is below <code>miter_limit</code>, <code>:miter</code> is equivalent to <code>:bevel</code> to avoid long spikes.</p><p><strong><code>linecap</code></strong> = <code>@inherit linecap</code> — Sets the type of line cap used. Options are <code>:butt</code> (flat without extrusion), <code>:square</code> (flat with half a linewidth extrusion) or <code>:round</code>.</p><p><strong><code>linecolor</code></strong> = <code>@inherit linecolor</code> — <em>No docs available.</em></p><p><strong><code>linestyle</code></strong> = <code>nothing</code> — Sets the dash pattern of the line. Options are <code>:solid</code> (equivalent to <code>nothing</code>), <code>:dot</code>, <code>:dash</code>, <code>:dashdot</code> and <code>:dashdotdot</code>. These can also be given in a tuple with a gap style modifier, either <code>:normal</code>, <code>:dense</code> or <code>:loose</code>. For example, <code>(:dot, :loose)</code> or <code>(:dashdot, :dense)</code>.</p><p>For custom patterns have a look at <a href="./@ref"><code>Makie.Linestyle</code></a>.</p><p><strong><code>linewidth</code></strong> = <code>@inherit linewidth</code> — Sets the width of the line in screen units</p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>miter_limit</code></strong> = <code>@inherit miter_limit</code> — Sets the minimum inner join angle below which miter joins truncate. See also <code>Makie.miter_distance_to_angle</code>.</p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>n_points</code></strong> = <code>automatic</code> — <em>No docs available.</em></p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>',46)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[46]||(e[46]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L527-L634",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",M,[o("summary",null,[e[48]||(e[48]=o("a",{id:"TimeseriesMakie.trail!",href:"#TimeseriesMakie.trail!"},[o("span",{class:"jlbinding"},"TimeseriesMakie.trail!")],-1)),e[49]||(e[49]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[51]||(e[51]=o("p",null,[o("code",null,"trail!"),t(" is the mutating variant of plotting function "),o("code",null,"trail"),t(". Check the docstring for "),o("code",null,"trail"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[50]||(e[50]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L529",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",S,[o("summary",null,[e[52]||(e[52]=o("a",{id:"TimeseriesMakie.trajectory",href:"#TimeseriesMakie.trajectory"},[o("span",{class:"jlbinding"},"TimeseriesMakie.trajectory")],-1)),e[53]||(e[53]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[55]||(e[55]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trajectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, [z]; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plots a colored trajectory in 2D or 3D space.</p><p><strong>Key attribtues:</strong></p><p><code>color</code> = <code>:speed</code>: The coloring method for the trajectory.</p><p>Can be one of:</p><ul><li><p><code>:speed</code>: Color by speed along the trajectory</p></li><li><p><code>:time</code>: Color by time index</p></li><li><p><code>&lt;: AbstractVector</code>: Color by a custom vector of values</p></li><li><p><code>Union{&lt;:Symbol, &lt;:Colorant}</code>: Color by a fixed color</p></li></ul><p><em>Other attributes are shared with <code>Makie.Lines</code>.</em></p><p><strong>Plot type</strong></p><p>The plot type alias for the <code>trajectory</code> function is <code>Trajectory</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>1.0</code> — The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>color</code></strong> = <code>:speed</code> — The coloring method for the trajectory</p><p><strong><code>colormap</code></strong> = <code>@inherit colormap :viridis</code> — Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><p><strong><code>cycle</code></strong> = <code>[:color]</code> — Sets which attributes to cycle when creating multiple plots.</p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>fxaa</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>joinstyle</code></strong> = <code>@inherit joinstyle</code> — Controls the rendering at corners. Options are <code>:miter</code> for sharp corners, <code>:bevel</code> for &quot;cut off&quot; corners, and <code>:round</code> for rounded corners. If the corner angle is below <code>miter_limit</code>, <code>:miter</code> is equivalent to <code>:bevel</code> to avoid long spikes.</p><p><strong><code>linecap</code></strong> = <code>@inherit linecap</code> — Sets the type of line cap used. Options are <code>:butt</code> (flat without extrusion), <code>:square</code> (flat with half a linewidth extrusion) or <code>:round</code>.</p><p><strong><code>linestyle</code></strong> = <code>nothing</code> — Sets the dash pattern of the line. Options are <code>:solid</code> (equivalent to <code>nothing</code>), <code>:dot</code>, <code>:dash</code>, <code>:dashdot</code> and <code>:dashdotdot</code>. These can also be given in a tuple with a gap style modifier, either <code>:normal</code>, <code>:dense</code> or <code>:loose</code>. For example, <code>(:dot, :loose)</code> or <code>(:dashdot, :dense)</code>.</p><p>For custom patterns have a look at <a href="./@ref"><code>Makie.Linestyle</code></a>.</p><p><strong><code>linewidth</code></strong> = <code>@inherit linewidth</code> — Sets the width of the line in screen units</p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>miter_limit</code></strong> = <code>@inherit miter_limit</code> — Sets the minimum inner join angle below which miter joins truncate. See also <code>Makie.miter_distance_to_angle</code>.</p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>',39)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[54]||(e[54]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L527-L623",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),o("details",x,[o("summary",null,[e[56]||(e[56]=o("a",{id:"TimeseriesMakie.trajectory!",href:"#TimeseriesMakie.trajectory!"},[o("span",{class:"jlbinding"},"TimeseriesMakie.trajectory!")],-1)),e[57]||(e[57]=t()),s(c,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[59]||(e[59]=o("p",null,[o("code",null,"trajectory!"),t(" is the mutating variant of plotting function "),o("code",null,"trajectory"),t(". Check the docstring for "),o("code",null,"trajectory"),t(" for further information.")],-1)),s(c,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[58]||(e[58]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L529",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const P=a(p,[["render",_]]);export{N as __pageData,P as default};
